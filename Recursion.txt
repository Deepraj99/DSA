Recurtion - If a function is calling itself then it is call as recursive function
and inside recursive function there must be a condition which will make the recurtion stop.

head recursion
tail recursion
tree recursion - complexcity - 2^n



https://codeforces.com/contest/1385/problem/D

#include<bits/stdc++.h>
#define test int t; cin>>t; while(t--)
#define ll long long int
#define forr(n) for(int i=0; i<n; i++)
#define IOS ios_base::sync_with_stdio(false); cin.tie(NULL); cout.tie(NULL);
#define INPUT(a) int n; cin>>n; int a[n]; for(int i=0; i<n; i++) {cin>>a[i];}
#define input(a) for(ll i=0; i<n; i++) {cin>>a[i];}
#define mod 1000000007
#include<math.h>
#include<string>
#define endl "\n"
using namespace std;
//-----------------------------------------------------------------------------

int rec(string &s, char c, int x, int y)
{
    if(x == y)
    {
        if(s[x] == c) return 0;
        else return 1;
    }
    int mid = (x+y)/2;
    int c1=0, c2=0;
    for(int i=x; i<=mid; i++)
    {
        if(s[i]!=c)
            c1++;
    }
    for(int i=y; i>mid; i--)
    {
        if(s[i]!=c)
            c2++;
    }
    return min(c2+rec(s, c+1, x, mid), (c1+rec(s, c+1, mid+1, y)));
}

int main()
{
    IOS
    test
    {
        int n;
        cin>>n;
        string s;
        cin>>s;
        cout<<rec(s, 'a', 0, n-1)<<endl;
    }
    return 0;
}



https://www.hackerrank.com/challenges/the-power-sum/problem

#include <cmath>
#include <iostream>
using namespace std;

int totnum(int X,int N,int num){
    if(pow(num,N)<X)
        return totnum(X,N,num+1)+totnum(X-pow(num,N),N,num+1);
    else if(pow(num,N)==X)
        return 1;
    else
        return 0;
}

int main() {
    int X,N;
    cin>>X>>N;
    cout<<totnum(X,N,1);
    return 0;
}