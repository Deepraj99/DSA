
void merge(int arr[], int low, int high)
{
    int mid = low + (high - low)/2;
    int i = low;
    int j = mid+1;
    int k = low;
    int temp[high+1];

    while(i<=mid && j<=high)
    {
        if(arr[i] > arr[j])
        temp[k++] = arr[j++];
        else
        temp[k++] = arr[i++];
    }
    while(i <= mid)
        temp[k++] = arr[i++];
    while(j <= high)
        temp[k++] = arr[j++];

    for(int i=low; i<=high; i++)
        arr[i] = temp[i];
}
void mergeSort(int arr[], int low, int high)
{
    if(low >= high)
    return; 

    int mid = low + (high - low)/2;

    mergeSort(arr, 0, mid);
    mergeSort(arr, mid+1, high);

    merge(arr, low, high);
}

int32_t main()
{
	IOS
	test
	{
        input(arr)
        mergeSort(arr, 0, n-1);
        f(n)
            cout << arr[i] << " ";
        cout << endl;
    }
	return 0;
}
 
