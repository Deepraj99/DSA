Kadane's Algorithms

vector of vector-
https://leetcode.com/problems/merge-intervals/submissions/
        vector<vector<int>> res;
        sort(intervals.begin(), intervals.end());
        for(int i=0; i<intervals.size(); i++)
        {
            if(res.size()==0 || res.back()[1]<intervals[i][0])
                res.push_back(intervals[i]);
            else
                res.back()[1] = max(res.back()[1], intervals[i][1]);
        }
        return res;

        
Pair of more than 2 vales --
struct Node
{
    int s;
    int e;
    int pos;
};

bool comparator(struct Node a1, Node b1)
{
    return (a1.e < b1.e);
}

void maxMeetings(int start[], int end[], int n)
{
    Node meet[n];
    for(int i=0; i<n; i++)
    {
        meet[i].s = start[i];
        meet[i].e = end[i];
        meet[i].pos = i+1;
    }
    sort(meet, meet+n, comparator);

    cout << meet[0].pos << " ";
    int limit = meet[0].pos;
    for(int i=1; i<n; i++)
    {
        if(meet[i].s >= limit)
        {
            cout << meet[i].pos << " ";
            limit = meet[i].e;
        }
    }
}
